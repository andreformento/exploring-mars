buildscript {
    ext {
        springBootVersion = '1.5.6.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('com.google.guava:guava:21.0')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jdk8')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('nl.jqno.equalsverifier:equalsverifier:2.3')
    testCompile("org.assertj:assertj-core:3.8.0")
    testCompile("findbugs:findbugs:1.0.0")

    integrationTestCompile('net.javacrumbs.json-unit:json-unit-fluent:1.23.0')
    integrationTestCompile('io.rest-assured:rest-assured:3.0.3')
    integrationTestCompile('io.rest-assured:json-schema-validator:3.0.3')
    integrationTestCompile('io.rest-assured:spring-mock-mvc:3.0.3')
}

// how to remove warning on gradle
// http://www.thinkcode.se/blog/2017/08/14/gradle-settestclassesdirfile-method-has-been-deprecated
sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

task integrationTest(type: Test, dependsOn: cleanTest) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    // If you want just a single task to always run, you can set the outputs property inside of the task.
    outputs.upToDateWhen { false }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

integrationTest.mustRunAfter test
jacocoTestReport.mustRunAfter integrationTest

integrationTest.dependsOn test
codeCoverageReport.dependsOn integrationTest
check.dependsOn integrationTest
check.dependsOn jacocoTestReport
